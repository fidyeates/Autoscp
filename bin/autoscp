#!/bin/bash
: '
Script to initialize dev work on a remote machine takes arguments
$0 Target Machine
$1 Origin Dir
$2 Remote Dir
$3 Initial Upload (yes/no)
$4 Do Git Diff (yes/no)
$5 Diff Branch

'

if [ $# -lt 3 ]; then
    echo "Not Enough Arguments Supplied, Usage:"
    echo "  ./devify.sh TargetMachine OriginDir TargetDir (InitialUpload) (DoGitDiff) (DiffBranch)"
    exit 1
fi

TARGET=$1
ORIGIN=$2
REMOTE=$3
INITIAL=$4
DIFF=$5
DIFF_BRANCH=$6

cd $ORIGIN

python - << EOF
import os.path, time
import fnmatch
import re, os
from sys import argv, stderr
from subprocess import call, check_output
from collections import defaultdict
import argparse

includes = ["*"]
excludes = ["*/.git", "*.pyc"]

includes = r'|'.join([fnmatch.translate(x) for x in includes])
excludes = r'|'.join([fnmatch.translate(x) for x in excludes]) or r'$.'

last_written = defaultdict( lambda: None )

created_dirs = defaultdict( lambda: set() )

def uploadFile(filename):
    cmdp = ['scp', fname, "$TARGET:$REMOTE/%s" % (filename)]
    call( cmdp )

if "$DIFF" == "yes":
    cmd = ["git", "diff", "--name-only", ("$DIFF_BRANCH" or "dev")]
    flist = check_output( cmd ).rstrip().split()
    for fname in flist:
        print "\nFile:%s\nUploading to $TARGET:$REMOTE" % (fname)
        uploadFile(fname)

initial = "$INITIAL" or "no"

while True:
    for root, dirs, files in os.walk("$ORIGIN"):
        dirs[:] = [os.path.join(root, d) for d in dirs]
        dirs[:] = [d for d in dirs if not re.match(excludes, d)]

        # exclude/include files
        files = [os.path.join(root, f) for f in files]
        files = [f for f in files if not re.match(excludes, f)]
        files = [f for f in files if re.match(includes, f)]

        for fname in files:
            tmcheckwrite = os.lstat(fname).st_mtime
            if last_written.get(fname) != tmcheckwrite:
                if initial == "no" and last_written.get(fname) is None:
                    last_written.update({fname: tmcheckwrite})  
                    continue
                partial_name = fname.replace("$ORIGIN", "")
                if partial_name[0] == "/":
                    partial_name = partial_name[1:]
                print "\nFile:%s\nlast modified: %s. Uploading to %s" % (fname, time.ctime(tmcheckwrite), "$REMOTE")
                uploadFile(partial_name)
    time.sleep(0.5)

EOF


